@Library('shared-libraries@main') _

pipeline {
  environment {
    SERVICE                = "${JOB_BASE_NAME}"
    GIT_URL                = "git@gitlab.com:moca.vn/backend/core.git"
    DOCKER_REGISTRY_SERVER = "083849277817.dkr.ecr.ap-southeast-1.amazonaws.com"
    IMAGE                  = "${DOCKER_REGISTRY_SERVER}/${SERVICE}"
  }

  agent {
    kubernetes {
      label "Jenkins-${env.JOB_NAME}"
      yaml libraryResource('pod_templates/kubernetesPodBuild.yaml')
    }
  }

  triggers {
    GenericTrigger causeString: 'Generic Cause', 
      genericRequestVariables: [
        [key: 'DEPLOY_PILOT', regexpFilter: ''], 
        [key: 'DEPLOY_PROD', regexpFilter: '']
      ], 
      genericVariables: [
        [defaultValue: '', key: 'ref', regexpFilter: '', value: '$.ref']
      ], 
      regexpFilterExpression: '^(refs/heads/main)$', 
      regexpFilterText: '$ref', 
      token: 'core', 
      tokenCredentialId: ''
  }

  stages {
    /** BEGIN -- Setup Parameters **/
    stage('Setup Parameters') {
      steps {
        script { 
          properties([
            parameters([
              choice(
                name: 'BRANCH',
                choices: ['master'], 
                description: 'Branch of the service to build'
              ),
              booleanParam(
                defaultValue: false, 
                description: 'Toggle this value to deploy PILOT', 
                name: 'DEPLOY_PILOT'
              ),
              booleanParam(
                defaultValue: false, 
                description: 'Toggle this value to deploy PROD', 
                name: 'DEPLOY_PROD'
              ),
              booleanParam(
                defaultValue: false, 
                description: 'Refresh Jenkinsfile to update parameters', 
                name: 'REFRESH'
              ),
            ])
          ])
        }
      }
    }
    /** END -- Setup Parameters **/

    /** BEGIN -- ReadJenkinsfile **/
    stage('Read Jenkinsfile') {
      when {
        environment name: 'REFRESH', value: 'true'
      }
      steps {
        echo("Ended pipeline early.")
        script {
          currentBuild.description = "REFRESHED Jenkinsfile "
        }     
      }
    }
    /** END -- ReadJenkinsfile **/

    /** BEGIN -- Checkout Code **/
    stage("Checkout Code") {
      when {
        environment name: 'REFRESH', value: 'false'
      }
      steps {
        echo "Checkout Code for service ${SERVICE}"
        script {
          env.COMMIT = "84888c4"
          env.IMAGE_TAG = "${IMAGE}:${BRANCH}-${COMMIT}"
          env.IMAGE_TAG_LT = "${IMAGE}:latest"
        }
      }
    }
    /** END -- Checkout Code **/

    /** BEGIN -- Build source **/
    stage('Build Source') {
      when {
        environment name: 'REFRESH', value: 'false'
      }
      steps {
        container("grails2") {
          echo "Build Source for service ${SERVICE}"
        }
      }
    }
    /** END -- Build source **/


    /** BEGIN -- Docker build **/
    stage('Docker Build') {
      when {
        environment name: 'REFRESH', value: 'false'
      }
      steps {
        container('docker') {
          echo "Docker build for image with tag ${IMAGE_TAG}"
          echo "Docker build for image with tag ${IMAGE_TAG_LT}"
        }
      }
    }
    /** END -- Docker build **/

    /** BEGIN -- Upload Image to ACR **/
    stage('Upload Image') {
      when {
        environment name: 'REFRESH', value: 'false'
      }
      steps {
        container('docker') {
          echo "Upload image with tag ${IMAGE_TAG}"
          echo "Upload image with tag ${IMAGE_TAG_LT}"
        }
      }
    }
    /** END -- Upload Image to ACR **/

    /** BEGIN -- Deploy to Pilot **/
    stage('Deploy to Pilot') {
      when {
        allOf {
          environment name: 'DEPLOY_PILOT', value: 'true'
          environment name: 'REFRESH', value: 'false'
        }
      }
       steps {
        build(
          job: 'Production/deploy-production', 
          parameters: [
            string(name: 'SERVICE', value: "${SERVICE}"), 
            string(name: 'IMAGE_TAG', value: "${IMAGE_TAG}"),
            string(name: 'CHART_VERSION', value: "0.1.0"),
            string(name: 'DEPLOY_ENV', value: "pilot")
          ]
        )
      }
    }
    /** END -- Deploy to Pilot **/

    /** BEGIN -- Deploy to Production **/
    stage('Deploy to Production') {
      when {
        allOf {
          environment name: 'DEPLOY_PILOT', value: 'true'
          environment name: 'REFRESH', value: 'false'
        }
      }
      options {
        timeout(time: 1, unit: 'HOURS') 
      }
       steps {
        script {
           input(message: 'CONTINUE TO DEPLOY PRODUCTION?')
        }
        build(
          job: 'Production/deploy-production', 
          parameters: [
            string(name: 'SERVICE', value: "${SERVICE}"), 
            string(name: 'IMAGE_TAG', value: "${IMAGE_TAG}"),
            string(name: 'CHART_VERSION', value: "0.1.0"),
            string(name: 'DEPLOY_ENV', value: "production")
          ]
        )
      }
    }
    /** END -- Deploy to Production **/

  }
}

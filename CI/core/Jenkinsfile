@Library('shared-libraries@main') _

pipeline {
  environment {
    SERVICE                = "${JOB_BASE_NAME}"
    GIT_URL                = "git@gitlab.com:moca.vn/backend/core.git"
    DOCKER_REGISTRY_SERVER = "253427922730.dkr.ecr.us-east-1.amazonaws.com"
    IMAGE                  = "${DOCKER_REGISTRY_SERVER}/${SERVICE}"
  }

  agent {
    kubernetes {
      label "Jenkins-${env.JOB_NAME}"
      yaml libraryResource('pod_templates/kubernetesPodBuild.yaml')
    }
  }

  triggers {
    GenericTrigger (
      genericVariables: [
        [ key: 'ref', value: '\$.ref'],
        [ key: 'pusher_name', value: '\$.pusher.name'],
        [ key: 'clone_url', value: '\$.repository.clone_url'],
        [ key: 'commit', value: '\$.commits[0].id'],
      ],
      genericRequestVariables: [
        [key: 'DEPLOY_PILOT'], 
        [key: 'DEPLOY_PROD']
      ], 
      causeString: '$pusher_name pushed ref $ref to $clone_url referencing $commit',
      regexpFilterExpression: '^(refs/heads/main)$', 
      regexpFilterText: '$ref', 
      token: 'core', 
      printContributedVariables: true,
      printPostContent: true,
    )
  }

  stages {
    /** BEGIN -- Setup Parameters **/
    stage('Setup Parameters') {
      steps {
        script { 
          properties([
            parameters([
              choice(
                name: 'BRANCH',
                choices: ['master'], 
                description: 'Branch of the service to build'
              ),
              booleanParam(
                defaultValue: false, 
                description: 'Toggle this value to deploy PILOT', 
                name: 'DEPLOY_PILOT'
              ),
              booleanParam(
                defaultValue: false, 
                description: 'Toggle this value to deploy PROD', 
                name: 'DEPLOY_PROD'
              ),
              booleanParam(
                defaultValue: false, 
                description: 'Refresh Jenkinsfile to update parameters', 
                name: 'REFRESH'
              ),
            ])
          ])
        }
      }
    }
    /** END -- Setup Parameters **/

    /** BEGIN -- ReadJenkinsfile **/
    stage('Read Jenkinsfile') {
      when {
        environment name: 'REFRESH', value: 'true'
      }
      steps {
        echo("Ended pipeline early.")
        script {
          currentBuild.description = "REFRESHED Jenkinsfile "
        }     
      }
    }
    /** END -- ReadJenkinsfile **/

    /** BEGIN -- Checkout Code **/
    stage("Checkout Code") {
      when {
        environment name: 'REFRESH', value: 'false'
      }
      steps {
        echo "Checkout Code for service ${SERVICE}"
        git url: "${env.GIT_URL}",
        branch: "${env.BRANCH}",
        credentialsId: 'gitlab-ssh-key'
        script {
          env.COMMIT = sh(script: 'git log -1 --pretty=%h', returnStdout: true).trim()
          env.IMAGE_TAG = "${IMAGE}:${BRANCH}-${COMMIT}"
          env.IMAGE_TAG_LT = "${IMAGE}:latest"
        }
      }
    }
    /** END -- Checkout Code **/

    /** BEGIN -- Replace content **/
    stage('Replace content') {
      when {
        environment name: 'REFRESH', value: 'false'
      }
      steps {
        sh "sed -i 's,https://moca.vn/moca,https://moca.vn/moca,g' apps/moca-core/grails-app/conf/Config.groovy"
        sh "sed -i 's,http://localhost:8080/moca,https://moca.vn/moca,g' apps/moca-core/grails-app/conf/Config.groovy"
        sh "sed -i 's,http://d01.moca.vn/moca,https://moca.vn/moca,g' apps/moca-core/grails-app/conf/Config.groovy"
        // sh "sed -i 's,https://moca.vn/moca,https://hht-dev01.moca.vn/moca,g' apps/moca-core/grails-app/conf/Config.groovy"
        // sh "sed -i 's,http://localhost:8080/moca,https://hht-dev01.moca.vn/moca,g' apps/moca-core/grails-app/conf/Config.groovy"
        // sh "sed -i 's,http://d01.moca.vn/moca,https://hht-dev01.moca.vn/moca,g' apps/moca-core/grails-app/conf/Config.groovy"
        // sh "cat apps/moca-core/grails-app/conf/Config.groovy"
      }
    }
    /** END -- "Replace content **/

    /** BEGIN -- Build source **/
    stage('Build Source') {
      when {
        environment name: 'REFRESH', value: 'false'
      }
      steps {
        container("grails2") {
          echo "Build Source for service ${SERVICE}"
          dir("$workspace/apps/moca-core") {
            sh("grails clean")
            sh("grails compile")
            sh("grails war")
          }          
        }
      }
    }
    /** END -- Build source **/


    /** BEGIN -- Docker build **/
    stage('Docker Build') {
      when {
        environment name: 'REFRESH', value: 'false'
      }
      steps {
        container('docker') {
          echo "Docker build for image with tag ${IMAGE_TAG} and ${IMAGE_TAG_LT}"
          dir("$workspace/apps/moca-core") {  
            sh("docker build -t ${env.IMAGE_TAG} -t ${IMAGE_TAG_LT} .")
          }
        }
      }
    }
    /** END -- Docker build **/

    /** BEGIN -- Upload Image to ACR **/
    stage('Upload Image') {
      when {
        environment name: 'REFRESH', value: 'false'
      }
      steps {
        container('docker') {
          echo "Upload image with tag ${IMAGE_TAG}"
          withAWS(credentials:'aws-credential', region: "us-east-1") {
            sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${DOCKER_REGISTRY_SERVER}"
            sh "docker push ${IMAGE_TAG}"
            sh "docker push ${IMAGE_TAG_LT}"
          }
        }
      }
    }
    /** END -- Upload Image to ACR **/

    /** BEGIN -- Deploy to Pilot **/
    stage('Deploy to Pilot') {
      when {
        allOf {
          environment name: 'DEPLOY_PILOT', value: 'true'
          environment name: 'REFRESH', value: 'false'
        }
      }
       steps {
        build(
          job: 'Production/deploy-production', 
          parameters: [
            string(name: 'SERVICE', value: "${SERVICE}"), 
            string(name: 'IMAGE_TAG', value: "${IMAGE_TAG}"),
            string(name: 'CHART_VERSION', value: "0.1.0"),
            string(name: 'DEPLOY_ENV', value: "pilot")
          ]
        )
      }
    }
    /** END -- Deploy to Pilot **/

    /** BEGIN -- Deploy to Production **/
    stage('Deploy to Production') {
      when {
        allOf {
          environment name: 'DEPLOY_PROD', value: 'true'
          environment name: 'REFRESH', value: 'false'
        }
      }
      options {
        timeout(time: 1, unit: 'HOURS') 
      }
       steps {
        script {
           input(message: 'CONTINUE TO DEPLOY PRODUCTION?')
        }
        build(
          job: 'Production/deploy-production', 
          parameters: [
            string(name: 'SERVICE', value: "${SERVICE}"), 
            string(name: 'IMAGE_TAG', value: "${IMAGE_TAG}"),
            string(name: 'CHART_VERSION', value: "0.1.0"),
            string(name: 'DEPLOY_ENV', value: "production")
          ]
        )
      }
    }
    /** END -- Deploy to Production **/

  }
}
